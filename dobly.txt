

#include <stdio.h>
#include <stdlib.h>

// Definition of a doubly linked list node
struct Node {
int data;
struct Node* prev;
struct Node* next;
};

// Function to insert a node at the front of the list
struct Node* insertAtFront(struct Node* head, int data) {

    // Allocate memory for the new node
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    
    // Initialize the new node's data and pointers
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = head;

    // If the list is not empty, set the current head's prev pointer to the new node
    if (head != NULL){
        head->prev = newNode;

    // Update head to point to the new node
    head = newNode;
    return head;
}
}

// Function to insert a node to the left of a node with a specific key value
struct Node* insertLeft(struct Node* head, int key, int data) {
   
 
struct Node* current = head;

while (current != NULL) {
if (current->data == key) {
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
if (newNode == NULL) {
printf("Memory allocation error\n");
return head;
}
newNode->data = data;
newNode->next = current; // Link newNode to current
newNode->prev = current->prev; // Link newNode to current's prev

if (current->prev != NULL) {
current->prev->next = newNode; // Update previous node's next pointer
} else {
head = newNode; // Update head if current was the first node
}
current->prev = newNode; // Link current's prev to newNode
return head;
}
current = current->next;
}
printf("Node with key %d not found.\n", key);
}

// Function to delete a node with a specific value
struct Node* deleteNode(struct Node* head, int value) {
struct Node *temp = head;

while (temp != NULL &&  temp->data!=value){
    temp=temp->next;
}
if(temp!=NULL){
    if(temp->prev!=NULL){
        temp->prev->next=temp->next;
    }
    if(temp->next!=NULL){
        temp->prev->next=temp->prev;
        
    }
    if(temp==head){
        head=temp->next;
    }
    free(temp);
}
}

// Function to display the contents of the list
void displayList(struct Node *head) {
struct Node *current = head;
if (current == NULL) {
printf("Doubly Linked List is empty.\n");
return;
}
printf("Doubly Linked List: ");
while (current != NULL) {
printf("%d <-> ", current->data);
current = current->next;
}
printf("NULL\n");
}
struct Node* search(struct Node* head,int data){
    struct Node* temp=head;
    int pos=1;
    
    while(temp!=NULL){
        if(temp->data==data){
            printf("foubd%d %d",data,pos);
            return temp;
            
        }
        temp=temp->next;
        pos++;
    }
    printf("not founf%d",data);
}

// Main function to demonstrate the operations
int main() {
struct Node* head = NULL; // Initialize head to NULL
int choice, data, key;

while (1) {
printf("\nMenu:\n");
printf("1. Insert at Front\n");
printf("2. Insert Left of a Node\n");
printf("3. Delete a Node\n");
printf("4. Display List\n");
printf("5. searchy List\n");
printf("6. Exit\n");

printf("Enter your choice: ");
scanf("%d", &choice);

switch (choice) {
case 1:
printf("Enter value to insert at front: ");
scanf("%d", &data);

head=insertAtFront(head, data);
break;
case 2:
printf("Enter the key value to insert left of: ");
scanf("%d", &key);
printf("Enter value to insert: ");
scanf("%d", &data);
head=insertLeft(head, key,data);
break;
case 3:
printf("Enter value to delete: ");
scanf("%d", &data);
head=deleteNode(head, data);
break;
case 4:
displayList(head);
break;
case 5:
printf("search");
scanf("%d",&data);
search(head,data);
break;

case 6:
printf("Exiting program.\n");
return 0;
default:
printf("Invalid choice. Please try again.\n");
}
}
return 0;
}


